install
text
reboot --eject
lang en_US.UTF-8
keyboard us
rootpw r00tme
timezone --utc Etc/UTC
zerombr
firewall --disabled
selinux --disabled
clearpart --all --initlabel

repo --name="CentOS-6.3"  --baseurl="http://srv11-msk.msk.mirantis.net/centos-repo/centos-6.3/" --cost=100
repo --name="CentOS-6.3-updates" --baseurl="http://srv11-msk.msk.mirantis.net/centos-repo/centos-6.3-updates/" --cost=90
repo --name="epel-fuel-folsom" --baseurl="http://srv11-msk.msk.mirantis.net/centos-repo/epel-fuel-folsom-2.1/" --cost=80
repo --name="epel-fuel-grizzly" --baseurl="http://osci-koji.srt.mirantis.net/mash/epel-fuel-grizzly/x86_64/" --cost=80 --proxy="http://srv11-msk.msk.mirantis.net:3128"

%pre
#!/bin/sh

# hard drives
drives=""
for drv in `ls -1 /sys/block | grep "sd\|hd"`; do
    if (grep -q 0 /sys/block/${drv}/removable); then
        drives="${drives} ${drv}"
    fi
done

set ${drives}
numdrives=`echo $#`
tgtdrive="undefined"
if [ ${numdrives} -gt 1 ]; then
    exec < /dev/tty3 > /dev/tty3 2>&1
    chvt 3
    while [ "${tgtdrive}" = "undefined" ]; do
        clear
        echo
        echo '********************************************************************************'
        echo '*                                 W A R N I N G                                *'
        echo '*                                                                              *'
        echo '*  Which of the detected hard drives do you want to be used as                 *'
        echo '*  installation target?                                                        *'
        echo '*                                                                              *'
        echo '********************************************************************************'
        echo
        echo "Possible choices: ${drives}"
        echo
        read -p "Choose hard drive: " tgtdrive
    done
    clear
    chvt 1
else
    tgtdrive=`echo ${drives} | sed -e "s/^\s*//" -e "s/\s*$//"`
fi

# source
if test -e /dev/disk/by-uuid/will_be_substituted_with_actual_uuid; then
    echo "harddrive --partition=UUID=will_be_substituted_with_actual_uuid --dir=/" > /tmp/source.ks
else
    echo "cdrom" > /tmp/source.ks
fi

# bootloader
echo "bootloader --location=mbr --driveorder=${tgtdrive}" > /tmp/bootloader.ks

# partition
echo "partition / --fstype=ext4 --ondisk=${tgtdrive} --size=1 --grow --asprimary" > /tmp/partition.ks
echo "partition swap --recommended --ondisk=${tgtdrive}" >> /tmp/partition.ks


%end

%packages --nobase --excludedocs
wget
curl
crontabs
cronie
puppet-2.7.19
man
yum
openssh-clients
ntp
vim-enhanced
authconfig
system-config-firewall-base
policycoreutils
selinux-policy-targeted

#For the mirror
MySQL-client-5.5.28-6
MySQL-client-wsrep-5.5.28_wsrep_23.7-11
MySQL-python-1.2.3-0.3.c1.2.el6
MySQL-server-5.5.28-6
MySQL-server-wsrep-5.5.28_wsrep_23.7-11
MySQL-shared-5.5.28-6
MySQL-shared-wsrep-5.5.28_wsrep_23.7-11
authconfig-6.1.12-10.el6
autoconf-2.63-5.1.el6
automake-1.11.1-1.2.el6
avahi-0.6.25-11.el6
bind-utils-9.8.2-0.10.rc1.el6_3.6
byacc-1.9.20070509-7.el6
centos-release-6-3.el6.centos.9
cirros-testvm-0.3.0-2
cman-3.0.12.1-32.el6_3.2
cobbler-2.2.3-2.el6
cobbler-web-2.2.3-2.el6
cronie-1.4.4-7.el6
cronie-noanacron-1.4.4-7.el6
crontabs-1.10-33.el6
curl-7.19.7-26.el6_2.4
dhclient-4.1.1-31.0.1.P1.el6.centos.1
dmidecode-2.11-2.el6
dnsmasq-utils-2.48-6.el6
euca2ools-1.3.1-12.el6
fence-agents-3.1.5-17.1.el6_3
flex-2.5.35-8.el6
galera-23.2.2-1.rhel5
gcc-4.4.6-4.el6
gcc-c++-4.4.6-4.el6
haproxy-1.4.19-1.el6
keepalived-1.2.4-1.el6
make-3.81-20.el6
man-1.6f-30.el6
memcached-1.4.4-3.el6
mysql-5.1.66-2.el6_3
mysql-devel-5.1.66-2.el6_3
mysql-server-5.1.66-2.el6_3
nginx-1.0.15-3.el6
novnc-0.4-3.el6
ntp-4.2.4p8-2.el6.centos
numpy-1.4.1-9.el6
openssh-clients-5.3p1-81.el6_3
openssh-server-5.3p1-81.el6_3
openssl098e-0.9.8e-17.el6.centos.2
openstack-cinder-2012.2-6.mira
openstack-dashboard-2012.2-3.el6
openstack-glance-2012.2-2.el6
openstack-keystone-2012.2-3.mira.el6
openstack-nova-2012.2-6.mira
openstack-nova-novncproxy-0.4-3.el6
openstack-swift-1.7.4-3.mira
openstack-swift-account-1.7.4-3.mira
openstack-swift-container-1.7.4-3.mira
openstack-swift-object-1.7.4-3.mira
openstack-swift-proxy-1.7.4-3.mira
openstack-utils-2012.2-5.el6
patch-2.6-6.el6
policycoreutils-2.0.83-19.24.el6
postgresql-8.4.13-1.el6_3
postgresql-devel-8.4.13-1.el6_3
postgresql-libs-8.4.13-1.el6_3
postgresql-server-8.4.13-1.el6_3
puppet-2.7.19-1.el6
puppet-server-2.7.19-1.el6
puppetdb-1.0.5-1.el6
puppetdb-terminus-1.0.5-1.el6
python-amqp-1.2.0-6.el6
python-argparse-1.2.1-2.el6
python-cinder-2012.2-6.mira
python-devel-2.6.6-29.el6_3.3
python-keystone-2012.2-3.mira.el6
python-novaclient-2.9.0-1.el6
python-pip-0.8-1.el6
python-setuptools-0.6.10-3.el6
python-virtualenv-1.7-1.el6
qemu-0.15.0-1.el6.rfx
qemu-img-0.12.1.2-2.295.el6_3.10
qemu-kvm-0.12.1.2-2.295.el6_3.10
rabbitmq-server-2.8.7-2.el6
rpm-build-4.8.0-27.el6
rsyslog-5.8.10-2.el6
rsyslog-relp-5.8.10-2.el6
rsyslog-gssapi-5.8.10-2.el6
rsyslog-snmp-5.8.10-2.el6
rsyslog-gnutls-5.8.10-2.el6
librelp-0.1.1-4.1.el6
ruby-1.8.7.352-7.el6_2
ruby-augeas-0.4.1-1.el6
ruby-devel-1.8.7.352-7.el6_2
ruby-mysql-2.8.2-1.el6
ruby-rdoc-1.8.7.352-7.el6_2
ruby-ri-1.8.7.352-7.el6_2
ruby-shadow-1.4.1-13.el6
rubygem-mongrel-1.1.5-3.el6
rubygem-stomp-1.2.2-1.el6
rubygems-1.3.7-1.el6
scapy-2.0.0.10-5.el6
screen-4.0.3-16.el6
selinux-policy-targeted-3.7.19-154.el6
socat-1.7.2.1-1.el6
supervisor-2.1-8.el6
syslinux-4.02-8.el6
system-config-firewall-base-1.2.27-5.el6
tcpdump-4.0.0-3.20090921gitdf3cb4.2.el6
tftp-server-0.49-7.el6
unzip-6.0-1.el6
vim-enhanced-7.2.411-1.8.el6
wget-1.12-1.4.el6
xfsprogs-3.1.1-7.el6
xinetd-2.3.14-35.el6_3
yum-3.2.29-30.el6.centos
%end 
%post --log=/root/anaconda-post.log
#!/bin/sh

set -x

function setconf {
    echo
    echo -n "Enter hostname (FQDN): "; read hostname
    echo -n "Enter device name: "; read device
    echo -n "Enter ip: "; read ip
    echo -n "Enter netmask: "; read netmask
    echo -n "Enter default gw: "; read gw
    echo -n "Enter Primary DNS server: "; read dns1
    echo -n "Enter Secondary DNS server: "; read dns2
    hwaddr=`ifconfig $device | grep -i hwaddr | sed -e 's#^.*hwaddr[[:space:]]*##I'`
    echo
    echo You entered:
    show
    echo
    echo -n "Do you want to keep this settings (y/N):"
    read -n 1 answer
    if [[ $answer == "y" || $answer == "Y" ]]; then
        save_cfg
    fi
    echo
    echo -n "Do you want to configure another adapter (y/N):"
    read -n 1 answer
    if [[ $answer == "n" || $answer == "N" || $answer == "" ]]; then
        endconf=1
    fi
    }

function show {
    echo "Device: $device, MAC address $hwaddr"
    echo "Hostname: $hostname"
    [ -z $ip ] && echo "IP address: will be obtained via DHCP"
    [ ! -z $ip ] && echo "IP address: $ip Netmask: $netmask"
    echo "Gateway: $gw"
    echo "DNS Server 1: $dns1"
    echo "DNS Server 2: $dns2"
    }

function save_cfg {
    scrFile="/etc/sysconfig/network-scripts/ifcfg-$device"
    sed -i -e 's#^\(HOSTNAME=\).*$#\1'"$hostname"'#' /etc/sysconfig/network
    grep -q "^\s*$ip\s+$hostname" /etc/hosts || echo "$ip $hostname" >> /etc/hosts
    echo GATEWAY=$gw >> /etc/sysconfig/network
    echo "nameserver 127.0.0.1" > /etc/resolv.conf
    [ $dns1 ] && echo "nameserver $dns1" > /etc/dnsmasq.upstream
    [ $dns2 ] && echo "nameserver $dns2" >> /etc/dnsmasq.upstream

    echo DEVICE=$device > $scrFile
    echo ONBOOT=yes >> $scrFile
    echo NM_CONTROLLED=no >> $scrFile
    echo HWADDR=$hwaddr >> $scrFile
    echo USERCTL=no >> $scrFile
    echo PEERDNS=no >> $scrFile
    if [ $ip ]; then
        echo BOOTPROTO=static >> $scrFile
        echo IPADDR=$ip >> $scrFile
        echo NETMASK=$netmask >> $scrFile
    else
        echo BOOTPROTO=dhcp >> $scrFile
    fi
        }

# Default FQDN
hostname="nailgun.mirantis.com"

for I in `cat /proc/cmdline`; do case "$I" in *=*) eval $I;; esac ; done
hostname=$hostname
ip=$ip
netmask=$netmask
gw=$gw
device="eth0"
hwaddr=`ifconfig $device | grep -i hwaddr | sed -e 's#^.*hwaddr[[:space:]]*##I'`

# Saving stdin, stdout and stderr file descriptors
exec 3<&0
exec 4>&1
exec 5>&2

curTTY=`tty`
set +x
exec <$curTTY >$curTTY 2>&1
clear

endconf=0
show
echo -n "Press any key to make changes in network configuration"
read -n 1 -t 5 answer
if [ $? -gt 128 ]; then
    save_cfg
else
    while [ $endconf -eq 0 ]; do
        echo
        echo -n "Do you want to configure settings manually (y/N):"
        read -n 1 answer
        if [[ $answer == "y" || $answer == "Y" ]]; then
            setconf
        else
            endconf=1
        fi
    done
fi

chvt 1
# Restoring stdin, stdout and stderr file descriptors
exec 0<&3 3<&-
exec 1>&4 4>&-
exec 2>&5 5>&-
set -x

# Mounting installation source
SOURCE=/tmp/source
FS=/tmp/fs

echo
mkdir -p ${SOURCE}
mkdir -p ${FS}

if test -e /dev/disk/by-uuid/will_be_substituted_with_actual_uuid; then
    mount /dev/disk/by-uuid/will_be_substituted_with_actual_uuid ${FS}
    mount -o loop ${FS}/nailgun.iso ${SOURCE}
else
    mount /dev/cdrom ${SOURCE}
fi

# Copying Repo to the nailgun /var/www directory
repodir="/var/www/nailgun"
mkdir -p ${repodir}/centos/6.3/nailgun/x86_64
cp -r ${SOURCE}/images ${repodir}/centos/6.3/nailgun/x86_64
cp -r ${SOURCE}/isolinux ${repodir}/centos/6.3/nailgun/x86_64
cp -r ${SOURCE}/repodata ${repodir}/centos/6.3/nailgun/x86_64
cp -r ${SOURCE}/Packages ${repodir}/centos/6.3/nailgun/x86_64
cp ${SOURCE}/.treeinfo ${repodir}/centos/6.3/nailgun/x86_64

# Copying eggs/gems to the nailgun directory
cp -r ${SOURCE}/eggs ${repodir}
cp -r ${SOURCE}/gems ${repodir}

# Copying bootstrap image
mkdir -p ${repodir}/bootstrap
cp -r ${SOURCE}/bootstrap/initramfs.img ${repodir}/bootstrap
cp -r ${SOURCE}/bootstrap/linux ${repodir}/bootstrap

mkdir -p /root/.ssh
chmod 700 /root/.ssh
cp ${SOURCE}/bootstrap/bootstrap.rsa /root/.ssh
chmod 600 /root/.ssh/bootstrap.rsa

# Unpacking puppet manifests for master and slave
cp ${SOURCE}/puppet-slave.tgz ${repodir}/
mkdir -p /opt/nailgun_puppet
tar zxf ${SOURCE}/puppet-nailgun.tgz -C /opt/nailgun_puppet
tar zxf ${SOURCE}/puppet-slave.tgz -C /etc/puppet/modules
mkdir -p /etc/puppet/manifests/
cp /etc/puppet/modules/osnailyfacter/examples/site.pp /etc/puppet/manifests/site.pp
ln -s /etc/puppet/modules/puppetdb/ /etc/puppet/modules/postgresql/ /etc/puppet/modules/inifile/ /opt/nailgun_puppet/

# Prepare local repository specification
rm /etc/yum.repos.d/CentOS*.repo
cat > /etc/yum.repos.d/nailgun.repo << EOF
[nailgun]
name=Nailgun Local Repo
baseurl=file:/var/www/nailgun/centos/6.3/nailgun/x86_64
gpgcheck=0
EOF

# Disable GSSAPI in ssh server config
sed -i -e "/^\s*GSSAPICleanupCredentials yes/d" -e "/^\s*GSSAPIAuthentication yes/d" /etc/ssh/sshd_config

# Copying bootstrap_admin_node.sh, chmod it and
# adding /etc/init/bootstrap_admin_node.conf
cp ${SOURCE}/bootstrap_admin_node.sh /usr/local/sbin/bootstrap_admin_node.sh
chmod 0777 /usr/local/sbin/bootstrap_admin_node.sh
cp ${SOURCE}/bootstrap_admin_node.conf /etc/init/bootstrap_admin_node.conf
echo "ENABLED=1" > /etc/sysconfig/bootstrap_admin_node

# Copying version.yaml file. It contains COMMIT_SHA of last commit.
mkdir -p /etc/nailgun
cp ${SOURCE}/version.yaml /etc/nailgun/version.yaml


# Prepare custom /etc/issue logon banner and script for changing IP in it
cat > /etc/issue << EOF
############################################
#       Welcome to the FuelWeb server      #
############################################
Server is running on \m platform

FuelWeb UI is available on: http://:8000

Default administrator login:    root
Default administrator password: r00tme

Please change root password on first login.

EOF

echo "sed -i \"s%\(^.*able on:\).*$%\1 http://\`ip address show eth0 | awk '/inet / {print \$2}' | cut -d/ -f1 -\`:8000%\" /etc/issue" >>/etc/rc.local

# Unmounting source
umount -f ${SOURCE}
rm -rf ${SOURCE}

umount -f ${FS} || true
rm -rf ${FS}

# Enabling/configuring NTPD and ntpdate services
echo "server 127.127.1.0"            >> /etc/ntp.conf
echo "fudge  127.127.1.0 stratum 10" >> /etc/ntp.conf
echo "tos    orphan 7"               >> /etc/ntp.conf

chkconfig ntpd on
chkconfig ntpdate on

# Do not show error message on ntpdate failure. Customers should not be confused
# if admin node does not have access to the internet time servers.
sed -i /etc/rc.d/init.d/ntpdate -e 's/\([ $RETVAL -eq 0 ] && success || \)failure/\1success/'

# Disabling splash
sed -i --follow-symlinks -e '/^\skernel/ s/rhgb//' /etc/grub.conf
sed -i --follow-symlinks -e '/^\skernel/ s/quiet//' /etc/grub.conf

# Disabling console clearing
sed -i 's/getty/getty --noclear/' /etc/init/tty.conf

# Disabling starting first console from start-ttys service
sed -i --follow-symlinks -e 's/ACTIVE_CONSOLES=.*/ACTIVE_CONSOLES=\/dev\/tty\[2-6\]/' /etc/sysconfig/init

# Copying default bash settings to the root directory
cp -f /etc/skel/.bash* /root/

%end
